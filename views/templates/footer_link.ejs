<!-- plugins:js -->
<script src="/vendors/js/vendor.bundle.base.js"></script>
<!-- endinject -->
<!-- Plugin js for this page -->
<script src="/vendors/chart.js/Chart.min.js"></script>

<!-- <script src="/js/dataTables.select.min.js"></script> -->

<!-- End plugin js for this page -->
<!-- inject:js -->
<script src="/js/off-canvas.js"></script>
<script src="/js/hoverable-collapse.js"></script>
<script src="/js/template.js"></script>
<script src="/js/settings.js"></script>
<script src="/js/todolist.js"></script>
<!-- endinject -->
<!-- Custom js for this page-->
<script src="/js/dashboard.js"></script>
<script src="/js/Chart.roundedBarCharts.js"></script>
<script src="https://code.jquery.com/jquery-3.7.1.js"></script>
<script src="/js/javascript.js"></script>
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-beta.1/dist/js/select2.min.js"></script>
<script src="https://cdn.datatables.net/2.1.5/js/dataTables.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.5.0/socket.io.min.js"></script>

<!-- End custom js for this page-->
<script>
 $('.select2').select2();    
$('#example').DataTable();
</script>
<script>
    // Connect to the server
   // Ensure that socket.io connects after the page has loaded
   window.onload = function() {
            const socket = io(); 
            var range_code = '<%=user.range_id %>'
            var user_type = '<%=user.user_type %>' // Connect to the server
            // Listen for the 'notification' event
            socket.emit('notification-request', {range_code:range_code,user_type:user_type });
            // Listen for the 'notification' event from the server
            socket.on('notification', (data) => {
                //$('#count').html(data.message.length > 0 ? data.message.length : 0);
                if(data.message.length > 0 ){
                    let html = '';  // Start with an empty string to accumulate the HTML
                    var tot_view_count = 0;
                    data.message.forEach((msg) => {
                            if(msg.type == 'S' || msg.type == 'D' || msg.type == 'V'){
                                var slug =msg.slug+msg.wrk_releated_id
                            }else{
                                var slug =msg.slug
                            }
                            if(msg.view_status == 1){
                                tot_view_count +=1;
                            }
                        // For each message, create a dropdown item
                        html += `
                            <button class="myButton myButton_cus dropdown-item preview-item ${msg.view_status ==1 ? 'unreadmessage' : 'readmessage'}" value="${slug}"  data-id="${msg.id}" >
                                <div class="preview-item-content">
                                    <h6 class="preview-subject font-weight-normal">${msg.message || 'No subject'}</h6>
                                    <p class="date_cus font-weight-light small-text mb-0 text-muted">${new Date(msg.created_at).toLocaleDateString('en-IN', { year: 'numeric' , month: 'short' ,day: 'numeric' }) || 'Just now'}</p>
                                </div>
                            </button>
                        `;
                    });
                    // Append the generated HTML to the dropdown container
                    $('#notification_list').html(html) ;
                    if(tot_view_count == 0){
                        var spanElement = document.getElementById('count_lid');
                       // spanElement.classList.remove('count');
                        spanElement.classList.add('uncount');
                    }else{
                        var spanElement = document.getElementById('count_lid');
                        spanElement.classList.add('count');
                    }
                }
            });
        };
         $('#markasread').on('click', function() {
                const socket = io(); 
                var range_code = '<%=user.range_id %>'
                var user_type = '<%=user.user_type %>' // Connect to the server
                // Listen for the 'notification' event
                socket.emit('markassread', {range_code:range_code,user_type:user_type });
                var spanElement = document.getElementById('count_lid');
                        spanElement.classList.remove('count');
                        spanElement.classList.add('uncount');
                socket.on('notification', (data) => {
                 //   alert('test');
                $('#notification_list').html('') ;
                var tot_view_count = 0;
               // $('#count').html(data.message.length > 0 ? data.message.length : 0);
                if(data.message.length > 0 ){
                    let html = '';  // Start with an empty string to accumulate the HTML
                    data.message.forEach((msg) => {
                            if(msg.type == 'S' || msg.type == 'D' || msg.type == 'V'){
                                var slug =msg.slug+msg.wrk_releated_id
                            }else{
                                var slug =msg.slug
                            }
                            if(msg.view_status ==1){
                                tot_view_count +=1;
                            }
                        // For each message, create a dropdown item
                        html += `
                            <button class="myButton dropdown-item preview-item ${msg.view_status ==1 ? 'unreadmessage' : ''}" value="${slug}"  data-id="${msg.id}" >
                                <div class="preview-item-content">
                                    <h6 class="preview-subject font-weight-normal">${msg.message || 'No subject'}</h6>
                                    <p class="font-weight-light small-text mb-0 text-muted">${new Date(msg.created_at).toLocaleDateString('en-IN', { year: 'numeric' , month: 'short' ,day: 'numeric' }) || 'Just now'}</p>
                                </div>
                            </button>
                        `;
                    });
                    // Append the generated HTML to the dropdown container
                    $('#notification_list').html(html) ;
                    if(tot_view_count == 0){
                        var spanElement = document.getElementById('count_lid');
                       // spanElement.classList.remove('count');
                        spanElement.classList.add('uncount');
                    }else{
                        var spanElement = document.getElementById('count_lid');
                        spanElement.classList.add('count');
                    }
                }
            });
    
          });
          $(document).ready(function() {
        // Use event delegation to attach the click event handler to the parent container
        $('#notification_list').on('click', '.myButton', function() {
            // Extract the 'value' attribute for the URL redirection
            const redirectUrl = $(this).val();
            // Extract the 'data-id' attribute for the AJAX request
            const dataId = $(this).data('id');
            // Fire the AJAX request
            $.ajax({
                url: '/society/updatenotiasread',  // Replace with the actual endpoint
                type: 'POST',
                data: { id: dataId },  // Send the 'data-id' value as part of the request
                success: function(response) {
                    console.log('AJAX success:', response);
                    // After successful AJAX request, redirect the user
                    window.location.href = redirectUrl;  // Redirect to the URL specified in 'value'
                },
                error: function(error) {
                    console.error('AJAX error:', error);  // Handle errors
                }
            });
        });
    });
    
    $(document).ready(function() {
    $('#topsoc_search').on('input', function() {
        let query = $(this).val();
        if (query.length > 3) {
            $('#loaderh').show(); // Show loader
            $.ajax({
                url: '/society/getsuggestions', // Your server endpoint
                method: 'GET',
                data: { name: query },
                success: function(data) {
                    var datahlist = data.datahlist;
                    $('#suggestionsh').empty().show();
                    datahlist.forEach(function(item) {
                        $('#suggestionsh').append(`<li class="list-group-item top_list">${item.cop_soc_name}</li>`);
                    });
                },
                error: function() {
                    console.error('Error fetching suggestions.');
                },
                complete: function() {
                    $('#loaderh').hide(); // Hide loader after the request is complete
                }
            });
        } else {
            $('#suggestionsh').hide();
            $('#loaderh').hide(); // Hide loader if query is too short
        }
    });

    $(document).on('click', '.top_list', function() {
        $('#topsoc_search').val($(this).text());
        $('#suggestionsh').hide();
    });
});
</script>


